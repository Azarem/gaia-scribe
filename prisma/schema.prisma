// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @db.Uuid
  name      String?  @unique
  email     String?  @unique
  avatarUrl String?
  groups    String[]  @default(["user"])

  lastActiveProject    ScribeProject? @relation(fields: [lastActiveProjectId], references: [id])
  lastActiveProjectId  String?
  lastActiveObjectId   String?
  lastActiveObjectType String?

  createdProjects  ScribeProject[] @relation("projectCreatedBy")
  updatedProjects  ScribeProject[] @relation("projectUpdatedBy")
  deletedProjects  ScribeProject[] @relation("projectDeletedBy")
  createdCops      Cop[]        @relation("copCreatedBy")
  updatedCops      Cop[]        @relation("copUpdatedBy")
  deletedCops      Cop[]        @relation("copDeletedBy")
  createdLabels    Label[]      @relation("labelCreatedBy")
  updatedLabels    Label[]      @relation("labelUpdatedBy")
  deletedLabels    Label[]      @relation("labelDeletedBy")
  createdFiles     File[]       @relation("fileCreatedBy")
  updatedFiles     File[]       @relation("fileUpdatedBy")
  deletedFiles     File[]       @relation("fileDeletedBy")
  createdBlocks    Block[]      @relation("blockCreatedBy")
  updatedBlocks    Block[]      @relation("blockUpdatedBy")
  deletedBlocks    Block[]      @relation("blockDeletedBy")
  createdParts     BlockPart[]  @relation("partCreatedBy")
  updatedParts     BlockPart[]  @relation("partUpdatedBy")
  deletedParts     BlockPart[]  @relation("partDeletedBy")
  createdStrings   StringType[] @relation("stringCreatedBy")
  updatedStrings   StringType[] @relation("stringUpdatedBy")
  deletedStrings   StringType[] @relation("stringDeletedBy")
  createdCommands  StringCommand[] @relation("commandCreatedBy")
  updatedCommands  StringCommand[] @relation("commandUpdatedBy")
  deletedCommands  StringCommand[] @relation("commandDeletedBy")
  createdStructs   Struct[]        @relation("structCreatedBy")
  updatedStructs   Struct[]        @relation("structUpdatedBy")
  deletedStructs   Struct[]        @relation("structDeletedBy")
  createdTransforms BlockTransform[] @relation("transformCreatedBy")
  updatedTransforms BlockTransform[] @relation("transformUpdatedBy")
  deletedTransforms BlockTransform[] @relation("transformDeletedBy")
  createdOverrides  Override[]      @relation("overrideCreatedBy")
  updatedOverrides  Override[]      @relation("overrideUpdatedBy")
  deletedOverrides  Override[]      @relation("overrideDeletedBy")
  createdMnemonics  GameMnemonic[]  @relation("mnemonicCreatedBy")
  updatedMnemonics  GameMnemonic[]  @relation("mnemonicUpdatedBy")
  deletedMnemonics  GameMnemonic[]  @relation("mnemonicDeletedBy")
  createdRewrites   Rewrite[]       @relation("rewriteCreatedBy")
  updatedRewrites   Rewrite[]       @relation("rewriteUpdatedBy")
  deletedRewrites   Rewrite[]       @relation("rewriteDeletedBy")
  createdUsers      User[]          @relation("userCreatedBy")
  deletedUsers      User[]          @relation("userDeletedBy")
  updatedUsers      User[]          @relation("userUpdatedBy")
  createdProjectUsers ProjectUser[] @relation("projectUserCreatedBy")
  deletedProjectUsers ProjectUser[] @relation("projectUserDeletedBy")
  updatedProjectUsers ProjectUser[] @relation("projectUserUpdatedBy")
  projectUsers        ProjectUser[] @relation("projectUserUser")
  createdBlockArtfiacts BlockArtifact[] @relation("blockArtifactCreatedBy")
  updatedBlockArtfiacts BlockArtifact[] @relation("blockArtifactUpdatedBy")
  deletedBlockArtfiacts BlockArtifact[] @relation("blockArtifactDeletedBy")
  createdPlatforms    Platform[]    @relation("platformCreatedBy")
  updatedPlatforms    Platform[]    @relation("platformUpdatedBy")
  deletedPlatforms    Platform[]    @relation("platformDeletedBy")
  createdAddressingModes AddressingMode[] @relation("addressingModeCreatedBy")
  updatedAddressingModes AddressingMode[] @relation("addressingModeUpdatedBy")
  deletedAddressingModes AddressingMode[] @relation("addressingModeDeletedBy")
  createdInstructionGroups InstructionGroup[] @relation("instructionGroupCreatedBy")
  updatedInstructionGroups InstructionGroup[] @relation("instructionGroupUpdatedBy")
  deletedInstructionGroups InstructionGroup[] @relation("instructionGroupDeletedBy")
  createdInstructionCodes InstructionCode[] @relation("instructionCodeCreatedBy")
  updatedInstructionCodes InstructionCode[] @relation("instructionCodeUpdatedBy")
  deletedInstructionCodes InstructionCode[] @relation("instructionCodeDeletedBy")
  createdVectors Vector[] @relation("vectorCreatedBy")
  updatedVectors Vector[] @relation("vectorUpdatedBy")
  deletedVectors Vector[] @relation("vectorDeletedBy")

  createdAt DateTime @default(now())
  createdBy String @db.Uuid
  createdByUser User? @relation(name: "userCreatedBy", fields: [createdBy], references: [id])
  deletedAt DateTime?
  deletedBy String? @db.Uuid
  deletedByUser User? @relation(name: "userDeletedBy", fields: [deletedBy], references: [id])
  updatedAt DateTime? @updatedAt
  updatedBy String? @db.Uuid
  updatedByUser User? @relation(name: "userUpdatedBy", fields: [updatedBy], references: [id])

  @@index([email])
  @@index([name])
  @@index([lastActiveProjectId])
  @@index([createdBy])
  @@index([updatedBy])
  @@index([deletedBy])
}

model ScribeProject {
  id       String   @id @default(cuid())
  name     String
  isPublic Boolean  @default(false)
  meta     Json?

  gameRomBranchId String?

  platform   Platform @relation(fields: [platformId], references: [id])
  platformId String
  
  // Related data
  cops      Cop[]
  files     File[]
  blocks    Block[]
  strings   StringType[]
  structs   Struct[]
  labels    Label[]
  rewrites  Rewrite[]
  mnemonics GameMnemonic[]
  overrides Override[]
  lastActiveUsers User[]
  projectUsers ProjectUser[]
  
  //Audit Fields
  createdAt     DateTime @default(now())
  createdBy     String @db.Uuid
  createdByUser User @relation(name: "projectCreatedBy", fields: [createdBy], references: [id])
  deletedAt     DateTime?
  deletedBy     String? @db.Uuid
  deletedByUser User? @relation(name: "projectDeletedBy", fields: [deletedBy], references: [id])
  updatedAt     DateTime? @updatedAt
  updatedBy     String? @db.Uuid
  updatedByUser User? @relation(name: "projectUpdatedBy", fields: [updatedBy], references: [id])

  @@index([name])
  @@index([gameRomBranchId])
  @@index([createdBy])
  @@index([updatedBy])
  @@index([deletedBy])
}

model ProjectUser {
  id   String @id @default(cuid())
  role String @default("contributor")

  project   ScribeProject @relation(fields: [projectId], references: [id])
  projectId String

  user   User   @relation(name: "projectUserUser", fields: [userId], references: [id])
  userId String @db.Uuid
  
  //Audit Fields
  createdAt     DateTime @default(now())
  createdBy     String @db.Uuid
  createdByUser User @relation(name: "projectUserCreatedBy", fields: [createdBy], references: [id])
  deletedAt     DateTime?
  deletedBy     String? @db.Uuid
  deletedByUser User? @relation(name: "projectUserDeletedBy", fields: [deletedBy], references: [id])
  updatedAt     DateTime? @updatedAt
  updatedBy     String? @db.Uuid
  updatedByUser User? @relation(name: "projectUserUpdatedBy", fields: [updatedBy], references: [id])

  @@unique([projectId, userId])
  @@index([projectId])
  @@index([userId])
  @@index([createdBy])
  @@index([updatedBy])
  @@index([deletedBy])
}

model Cop {
  id       String   @id @default(cuid())
  code     Int
  mnemonic String   // "00", "01", "02", etc.
  parts    String[] @default([])
  halt     Boolean  @default(false)
  
  // Owner
  project   ScribeProject @relation(fields: [projectId], references: [id])
  projectId String
  
  //Audit Fields
  createdAt     DateTime @default(now())
  createdBy     String @db.Uuid
  createdByUser User @relation(name: "copCreatedBy", fields: [createdBy], references: [id])
  deletedAt     DateTime?
  deletedBy     String? @db.Uuid
  deletedByUser User? @relation(name: "copDeletedBy", fields: [deletedBy], references: [id])
  updatedAt     DateTime? @updatedAt
  updatedBy     String? @db.Uuid
  updatedByUser User? @relation(name: "copUpdatedBy", fields: [updatedBy], references: [id])

  @@unique([projectId, code])
  @@unique([projectId, mnemonic])
  @@index([projectId])
  @@index([createdBy])
  @@index([updatedBy])
  @@index([deletedBy])
}

model Label {
  id       String   @id @default(cuid())
  location Int
  label    String
  
  // Owner
  project   ScribeProject @relation(fields: [projectId], references: [id])
  projectId String
  
  //Audit Fields
  createdAt     DateTime @default(now())
  createdBy     String @db.Uuid
  createdByUser User @relation(name: "labelCreatedBy", fields: [createdBy], references: [id])
  deletedAt     DateTime?
  deletedBy     String? @db.Uuid
  deletedByUser User? @relation(name: "labelDeletedBy", fields: [deletedBy], references: [id])
  updatedAt     DateTime? @updatedAt
  updatedBy     String? @db.Uuid
  updatedByUser User? @relation(name: "labelUpdatedBy", fields: [updatedBy], references: [id])

  @@unique([projectId, location])
  @@index([projectId])
  @@index([createdBy])
  @@index([updatedBy])
  @@index([deletedBy])
}

model Rewrite {
  id       String   @id @default(cuid())
  location Int
  value    Int
  
  // Owner
  project   ScribeProject @relation(fields: [projectId], references: [id])
  projectId String
  
  //Audit Fields
  createdAt     DateTime @default(now())
  createdBy     String @db.Uuid
  createdByUser User @relation(name: "rewriteCreatedBy", fields: [createdBy], references: [id])
  deletedAt     DateTime?
  deletedBy     String? @db.Uuid
  deletedByUser User? @relation(name: "rewriteDeletedBy", fields: [deletedBy], references: [id])
  updatedAt     DateTime? @updatedAt
  updatedBy     String? @db.Uuid
  updatedByUser User? @relation(name: "rewriteUpdatedBy", fields: [updatedBy], references: [id])

  @@unique([projectId, location])
  @@index([projectId])
  @@index([createdBy])
  @@index([updatedBy])
  @@index([deletedBy])
}

model GameMnemonic {
  id          String   @id @default(cuid())
  address     Int
  mnemonic    String
  meta        Json?
  
  // Owner
  project ScribeProject @relation(fields: [projectId], references: [id])
  projectId   String
  
  //Audit Fields
  createdAt     DateTime @default(now())
  createdBy     String @db.Uuid
  createdByUser User @relation(name: "mnemonicCreatedBy", fields: [createdBy], references: [id])
  deletedAt     DateTime?
  deletedBy     String? @db.Uuid
  deletedByUser User? @relation(name: "mnemonicDeletedBy", fields: [deletedBy], references: [id])
  updatedAt     DateTime? @updatedAt
  updatedBy     String? @db.Uuid
  updatedByUser User? @relation(name: "mnemonicUpdatedBy", fields: [updatedBy], references: [id])

  @@unique([projectId, address])
  @@unique([projectId, mnemonic])
  @@index([projectId])
  @@index([createdBy])
  @@index([updatedBy])
  @@index([deletedBy])
}

model Override {
  id       String   @id @default(cuid())
  location Int
  register String  @default("A")
  value    Int
  
  // Owner
  project   ScribeProject @relation(fields: [projectId], references: [id])
  projectId String
  
  //Audit Fields
  createdAt     DateTime @default(now())
  createdBy     String @db.Uuid
  createdByUser User @relation(name: "overrideCreatedBy", fields: [createdBy], references: [id])
  deletedAt     DateTime?
  deletedBy     String? @db.Uuid
  deletedByUser User? @relation(name: "overrideDeletedBy", fields: [deletedBy], references: [id])
  updatedAt     DateTime? @updatedAt
  updatedBy     String? @db.Uuid
  updatedByUser User? @relation(name: "overrideUpdatedBy", fields: [updatedBy], references: [id])

  @@unique([projectId, location])
  @@index([projectId])
  @@index([createdBy])
  @@index([updatedBy])
  @@index([deletedBy])
}

model File {
  id         String @id @default(cuid())
  name       String
  location   Int
  size       Int
  type       String
  group      String?
  scene      String?
  compressed Boolean?
  upper      Boolean?
  meta       Json?
  
  // Owner
  project   ScribeProject @relation(fields: [projectId], references: [id])
  projectId String

  //Audit Fields
  createdAt     DateTime @default(now())
  createdBy     String @db.Uuid
  createdByUser User @relation(name: "fileCreatedBy", fields: [createdBy], references: [id])
  deletedAt     DateTime?
  deletedBy     String? @db.Uuid
  deletedByUser User? @relation(name: "fileDeletedBy", fields: [deletedBy], references: [id])
  updatedAt     DateTime? @updatedAt
  updatedBy     String? @db.Uuid
  updatedByUser User? @relation(name: "fileUpdatedBy", fields: [updatedBy], references: [id])

  @@unique([projectId, name])
  @@index([projectId])
  @@index([createdBy])
  @@index([updatedBy])
  @@index([deletedBy])
}

model Block {
  id          String  @id @default(cuid())
  name        String
  movable     Boolean @default(false)
  group       String?
  scene       String?
  postProcess String?
  meta        Json?

  // Owner
  project   ScribeProject @relation(fields: [projectId], references: [id])
  projectId String
  
  // Relations
  transforms BlockTransform[]
  parts      BlockPart[]
  artifact   BlockArtifact?
  
  //Audit Fields
  createdAt     DateTime @default(now())
  createdBy     String @db.Uuid
  createdByUser User @relation(name: "blockCreatedBy", fields: [createdBy], references: [id])
  deletedAt     DateTime?
  deletedBy     String? @db.Uuid
  deletedByUser User? @relation(name: "blockDeletedBy", fields: [deletedBy], references: [id])
  updatedAt     DateTime? @updatedAt
  updatedBy     String? @db.Uuid
  updatedByUser User? @relation(name: "blockUpdatedBy", fields: [updatedBy], references: [id])

  @@unique([projectId, name])
  @@index([projectId])
  @@index([createdBy])
  @@index([updatedBy])
  @@index([deletedBy])
}

model BlockArtifact {
  // Owner
  block   Block @relation(fields: [blockId], references: [id])
  blockId String @id

  content String
  meta    Json?
  
  //Audit Fields
  createdAt     DateTime @default(now())
  createdBy     String @db.Uuid
  createdByUser User @relation(name: "blockArtifactCreatedBy", fields: [createdBy], references: [id])
  deletedAt     DateTime?
  deletedBy     String? @db.Uuid
  deletedByUser User? @relation(name: "blockArtifactDeletedBy", fields: [deletedBy], references: [id])
  updatedAt     DateTime? @updatedAt
  updatedBy     String? @db.Uuid
  updatedByUser User? @relation(name: "blockArtifactUpdatedBy", fields: [updatedBy], references: [id])

  @@index([createdBy])
  @@index([updatedBy])
  @@index([deletedBy])
}

model BlockTransform {
  id          String   @id @default(cuid())
  regex       String
  replacement String
  
  // Owner
  block   Block @relation(fields: [blockId], references: [id])
  blockId String
  
  //Audit Fields
  createdAt     DateTime @default(now())
  createdBy     String @db.Uuid
  createdByUser User @relation(name: "transformCreatedBy", fields: [createdBy], references: [id])
  deletedAt     DateTime?
  deletedBy     String? @db.Uuid
  deletedByUser User? @relation(name: "transformDeletedBy", fields: [deletedBy], references: [id])
  updatedAt     DateTime? @updatedAt
  updatedBy     String? @db.Uuid
  updatedByUser User? @relation(name: "transformUpdatedBy", fields: [updatedBy], references: [id])

  @@unique([blockId, regex])
  @@index([blockId])
  @@index([createdBy])
  @@index([updatedBy])
  @@index([deletedBy])
}

model BlockPart {
  id       String @id @default(cuid())
  name     String
  location Int
  size     Int
  type     String
  index    Int?
  
  // Owner
  block   Block @relation(fields: [blockId], references: [id])
  blockId String
  
  //Audit Fields
  createdAt     DateTime @default(now())
  createdBy     String @db.Uuid
  createdByUser User @relation(name: "partCreatedBy", fields: [createdBy], references: [id])
  deletedAt     DateTime?
  deletedBy     String? @db.Uuid
  deletedByUser User? @relation(name: "partDeletedBy", fields: [deletedBy], references: [id])
  updatedAt     DateTime? @updatedAt
  updatedBy     String? @db.Uuid
  updatedByUser User? @relation(name: "partUpdatedBy", fields: [updatedBy], references: [id])

  @@unique([blockId, name])
  @@index([blockId])
  @@index([createdBy])
  @@index([updatedBy])
  @@index([deletedBy])
}


model StringType {
  id           String @id @default(cuid())
  name         String  // e.g., "ASCIIString", "WideString"
  delimiter    String? // e.g., "|", "`", "~"
  shiftType    String? // e.g., "wh2", "h2"
  terminator   Int?
  greedy       Boolean?
  meta         Json?
  characterMap String[] @default([])
  
  // Owner
  project ScribeProject @relation(fields: [projectId], references: [id])
  projectId   String

  commands StringCommand[]
  
  //Audit Fields
  createdAt     DateTime @default(now())
  createdBy     String @db.Uuid
  createdByUser User @relation(name: "stringCreatedBy", fields: [createdBy], references: [id])
  deletedAt     DateTime?
  deletedBy     String? @db.Uuid
  deletedByUser User? @relation(name: "stringDeletedBy", fields: [deletedBy], references: [id])
  updatedAt     DateTime? @updatedAt
  updatedBy     String? @db.Uuid
  updatedByUser User? @relation(name: "stringUpdatedBy", fields: [updatedBy], references: [id])

  @@unique([projectId, name])
  @@unique([projectId, delimiter])
  @@index([projectId])
  @@index([createdBy])
  @@index([updatedBy])
  @@index([deletedBy])
}

// Commands for StringType
model StringCommand {
  id        String  @id @default(cuid())
  code      Int     // Command key/code
  mnemonic  String  // Command name/mnemonic
  types     String[] @default([])  // Array of parameter types
  delimiter Int?      // Optional delimiter for ESC commands
  halt      Boolean?  // Whether this command halts processing
  parts     String[] @default([]) // Array of part names
  meta      Json?
  
  // Owner
  stringType   StringType @relation(fields: [stringTypeId], references: [id])
  stringTypeId String
  
  //Audit Fields
  createdAt     DateTime @default(now())
  createdBy     String @db.Uuid
  createdByUser User @relation(name: "commandCreatedBy", fields: [createdBy], references: [id])
  deletedAt     DateTime?
  deletedBy     String? @db.Uuid
  deletedByUser User? @relation(name: "commandDeletedBy", fields: [deletedBy], references: [id])
  updatedAt     DateTime? @updatedAt
  updatedBy     String? @db.Uuid
  updatedByUser User? @relation(name: "commandUpdatedBy", fields: [updatedBy], references: [id])
  
  @@unique([stringTypeId, code])
  @@unique([stringTypeId, mnemonic])
  @@index([stringTypeId])
  @@index([createdBy])
  @@index([updatedBy])
  @@index([deletedBy])
}


model Struct {
  id            String @id @default(cuid())
  name          String // e.g., "h_actor", "sprite_group"
  types         String[] @default([]) // Array of type strings like ["Byte", "Word", "Address"]
  delimiter     Int?  // Optional delimiter value
  discriminator Int?  // Optional descriminator value  
  parent        String? // Optional parent struct name
  parts         String[] @default([])   // Optional array of part names
  meta          Json?
  
  // Owner
  project ScribeProject @relation(fields: [projectId], references: [id])
  projectId   String

  //Audit Fields
  createdAt     DateTime @default(now())
  createdBy     String @db.Uuid
  createdByUser User @relation(name: "structCreatedBy", fields: [createdBy], references: [id])
  deletedAt     DateTime?
  deletedBy     String? @db.Uuid
  deletedByUser User? @relation(name: "structDeletedBy", fields: [deletedBy], references: [id])
  updatedAt     DateTime? @updatedAt
  updatedBy     String? @db.Uuid
  updatedByUser User? @relation(name: "structUpdatedBy", fields: [updatedBy], references: [id])
  
  @@unique([projectId, name])
  @@index([projectId])
  @@index([createdBy])
  @@index([updatedBy])
  @@index([deletedBy])
}

model Platform {
  id          String   @id @default(cuid())
  name        String   // e.g., "NES", "SNES", "Genesis"
  isPublic    Boolean  @default(false)
  meta        Json?
  
  platformBranchId String?

  addressingModes AddressingMode[]
  instructionSet  InstructionGroup[]
  vectors         Vector[]
  projects        ScribeProject[]

  //Audit Fields
  createdAt     DateTime @default(now())
  createdBy     String @db.Uuid
  createdByUser User @relation(name: "platformCreatedBy", fields: [createdBy], references: [id])
  deletedAt     DateTime?
  deletedBy     String? @db.Uuid
  deletedByUser User? @relation(name: "platformDeletedBy", fields: [deletedBy], references: [id])
  updatedAt     DateTime? @updatedAt
  updatedBy     String? @db.Uuid
  updatedByUser User? @relation(name: "platformUpdatedBy", fields: [updatedBy], references: [id])
  
  @@index([platformBranchId])
  @@index([createdBy])
  @@index([updatedBy])
  @@index([deletedBy])
}

model AddressingMode {
  id          String   @id @default(cuid())
  name        String   // e.g., "AbsoluteLong", "DirectPageIndirectIndexedY"
  code        String   // e.g., "long", "dp_ind_y"
  size        Int
  format      String?
  pattern     String?
  meta        Json?

  platform    Platform @relation(fields: [platformId], references: [id])
  platformId  String

  instructionCodes InstructionCode[]
  
  //Audit Fields
  createdAt     DateTime @default(now())
  createdBy     String @db.Uuid
  createdByUser User @relation(name: "addressingModeCreatedBy", fields: [createdBy], references: [id])
  deletedAt     DateTime?
  deletedBy     String? @db.Uuid
  deletedByUser User? @relation(name: "addressingModeDeletedBy", fields: [deletedBy], references: [id])
  updatedAt     DateTime? @updatedAt
  updatedBy     String? @db.Uuid
  updatedByUser User? @relation(name: "addressingModeUpdatedBy", fields: [updatedBy], references: [id])
  
  @@index([platformId])
  @@index([createdBy])
  @@index([updatedBy])
  @@index([deletedBy])
}

model InstructionGroup {
  id          String   @id @default(cuid())
  name        String   // e.g., "ADC", "AND", "ASL"
  meta        Json?
  
  platform    Platform @relation(fields: [platformId], references: [id])
  platformId  String

  instructions InstructionCode[]
  
  //Audit Fields
  createdAt     DateTime @default(now())
  createdBy     String @db.Uuid
  createdByUser User @relation(name: "instructionGroupCreatedBy", fields: [createdBy], references: [id])
  deletedAt     DateTime?
  deletedBy     String? @db.Uuid
  deletedByUser User? @relation(name: "instructionGroupDeletedBy", fields: [deletedBy], references: [id])
  updatedAt     DateTime? @updatedAt
  updatedBy     String? @db.Uuid
  updatedByUser User? @relation(name: "instructionGroupUpdatedBy", fields: [updatedBy], references: [id])
  
  @@unique([platformId, name])
  @@index([platformId])
  @@index([createdBy])
  @@index([updatedBy])
  @@index([deletedBy])
}

model InstructionCode {
  id      String   @id @default(cuid())
  code    Int      // e.g., 0x69, 0x29, 0x0A
  cycles  Int?
  meta    Json?

  group   InstructionGroup @relation(fields: [groupId], references: [id])
  groupId String

  mode    AddressingMode @relation(fields: [modeId], references: [id])
  modeId  String

  //Audit Fields
  createdAt     DateTime @default(now())
  createdBy     String @db.Uuid
  createdByUser User @relation(name: "instructionCodeCreatedBy", fields: [createdBy], references: [id])
  deletedAt     DateTime?
  deletedBy     String? @db.Uuid
  deletedByUser User? @relation(name: "instructionCodeDeletedBy", fields: [deletedBy], references: [id])
  updatedAt     DateTime? @updatedAt
  updatedBy     String? @db.Uuid
  updatedByUser User? @relation(name: "instructionCodeUpdatedBy", fields: [updatedBy], references: [id])
  
  @@index([groupId])
  @@index([modeId])
  @@index([createdBy])
  @@index([updatedBy])
  @@index([deletedBy])
}

model Vector {
  id          String   @id @default(cuid())
  name        String   // e.g., "NMI", "IRQ", "BRK"
  address     Int      // e.g., 0xFFFA, 0xFFFE, 0xFFE7
  isEntry     Boolean  @default(false)
  meta        Json?
  
  platform    Platform @relation(fields: [platformId], references: [id])
  platformId  String
  
  //Audit Fields
  createdAt     DateTime @default(now())
  createdBy     String @db.Uuid
  createdByUser User @relation(name: "vectorCreatedBy", fields: [createdBy], references: [id])
  deletedAt     DateTime?
  deletedBy     String? @db.Uuid
  deletedByUser User? @relation(name: "vectorDeletedBy", fields: [deletedBy], references: [id])
  updatedAt     DateTime? @updatedAt
  updatedBy     String? @db.Uuid
  updatedByUser User? @relation(name: "vectorUpdatedBy", fields: [updatedBy], references: [id])
  
  @@index([platformId])
  @@index([createdBy])
  @@index([updatedBy])
  @@index([deletedBy])
}